// Code generated by goctl. DO NOT EDIT.
// Source: good.proto

package goodclient

import (
	"context"

	"zero_shop/app/goods/cmd/rpc/good"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateGoodDetailsRequest  = good.CreateGoodDetailsRequest
	CreateGoodDetailsResponse = good.CreateGoodDetailsResponse
	CreateGoodRequest         = good.CreateGoodRequest
	CreateGoodResponse        = good.CreateGoodResponse
	FindGoodRequest           = good.FindGoodRequest
	FindGoodResponse          = good.FindGoodResponse
	GetGoodDetailsRequest     = good.GetGoodDetailsRequest
	GetGoodDetailsResponse    = good.GetGoodDetailsResponse
	GoodData                  = good.GoodData

	Good interface {
		CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error)
		FindGoodPage(ctx context.Context, in *FindGoodRequest, opts ...grpc.CallOption) (*FindGoodResponse, error)
		CreateGoodDetails(ctx context.Context, in *CreateGoodDetailsRequest, opts ...grpc.CallOption) (*CreateGoodDetailsResponse, error)
		GetGoodDetails(ctx context.Context, in *GetGoodDetailsRequest, opts ...grpc.CallOption) (*GetGoodDetailsResponse, error)
	}

	defaultGood struct {
		cli zrpc.Client
	}
)

func NewGood(cli zrpc.Client) Good {
	return &defaultGood{
		cli: cli,
	}
}

func (m *defaultGood) CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error) {
	client := good.NewGoodClient(m.cli.Conn())
	return client.CreateGood(ctx, in, opts...)
}

func (m *defaultGood) FindGoodPage(ctx context.Context, in *FindGoodRequest, opts ...grpc.CallOption) (*FindGoodResponse, error) {
	client := good.NewGoodClient(m.cli.Conn())
	return client.FindGoodPage(ctx, in, opts...)
}

func (m *defaultGood) CreateGoodDetails(ctx context.Context, in *CreateGoodDetailsRequest, opts ...grpc.CallOption) (*CreateGoodDetailsResponse, error) {
	client := good.NewGoodClient(m.cli.Conn())
	return client.CreateGoodDetails(ctx, in, opts...)
}

func (m *defaultGood) GetGoodDetails(ctx context.Context, in *GetGoodDetailsRequest, opts ...grpc.CallOption) (*GetGoodDetailsResponse, error) {
	client := good.NewGoodClient(m.cli.Conn())
	return client.GetGoodDetails(ctx, in, opts...)
}
