// Code generated by goctl. DO NOT EDIT.
// Source: good.proto

package goodclient

import (
	"context"

	"zero_shop/app/goods/cmd/rpc/good"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateGoodRequest  = good.CreateGoodRequest
	CreateGoodResponse = good.CreateGoodResponse
	FindGoodRequest    = good.FindGoodRequest
	FindGoodResponse   = good.FindGoodResponse
	GoodData           = good.GoodData

	Good interface {
		CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error)
		FindGoodPage(ctx context.Context, in *FindGoodRequest, opts ...grpc.CallOption) (*FindGoodResponse, error)
	}

	defaultGood struct {
		cli zrpc.Client
	}
)

func NewGood(cli zrpc.Client) Good {
	return &defaultGood{
		cli: cli,
	}
}

func (m *defaultGood) CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error) {
	client := good.NewGoodClient(m.cli.Conn())
	return client.CreateGood(ctx, in, opts...)
}

func (m *defaultGood) FindGoodPage(ctx context.Context, in *FindGoodRequest, opts ...grpc.CallOption) (*FindGoodResponse, error) {
	client := good.NewGoodClient(m.cli.Conn())
	return client.FindGoodPage(ctx, in, opts...)
}
