// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: good.proto

package good

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Good_CreateGood_FullMethodName        = "/good.Good/CreateGood"
	Good_FindGoodPage_FullMethodName      = "/good.Good/FindGoodPage"
	Good_CreateGoodDetails_FullMethodName = "/good.Good/CreateGoodDetails"
)

// GoodClient is the client API for Good service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodClient interface {
	CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error)
	FindGoodPage(ctx context.Context, in *FindGoodRequest, opts ...grpc.CallOption) (*FindGoodResponse, error)
	CreateGoodDetails(ctx context.Context, in *CreateGoodDetailsRequest, opts ...grpc.CallOption) (*CreateGoodDetailsResponse, error)
}

type goodClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodClient(cc grpc.ClientConnInterface) GoodClient {
	return &goodClient{cc}
}

func (c *goodClient) CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error) {
	out := new(CreateGoodResponse)
	err := c.cc.Invoke(ctx, Good_CreateGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) FindGoodPage(ctx context.Context, in *FindGoodRequest, opts ...grpc.CallOption) (*FindGoodResponse, error) {
	out := new(FindGoodResponse)
	err := c.cc.Invoke(ctx, Good_FindGoodPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) CreateGoodDetails(ctx context.Context, in *CreateGoodDetailsRequest, opts ...grpc.CallOption) (*CreateGoodDetailsResponse, error) {
	out := new(CreateGoodDetailsResponse)
	err := c.cc.Invoke(ctx, Good_CreateGoodDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodServer is the server API for Good service.
// All implementations must embed UnimplementedGoodServer
// for forward compatibility
type GoodServer interface {
	CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error)
	FindGoodPage(context.Context, *FindGoodRequest) (*FindGoodResponse, error)
	CreateGoodDetails(context.Context, *CreateGoodDetailsRequest) (*CreateGoodDetailsResponse, error)
	mustEmbedUnimplementedGoodServer()
}

// UnimplementedGoodServer must be embedded to have forward compatible implementations.
type UnimplementedGoodServer struct {
}

func (UnimplementedGoodServer) CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGood not implemented")
}
func (UnimplementedGoodServer) FindGoodPage(context.Context, *FindGoodRequest) (*FindGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGoodPage not implemented")
}
func (UnimplementedGoodServer) CreateGoodDetails(context.Context, *CreateGoodDetailsRequest) (*CreateGoodDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodDetails not implemented")
}
func (UnimplementedGoodServer) mustEmbedUnimplementedGoodServer() {}

// UnsafeGoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodServer will
// result in compilation errors.
type UnsafeGoodServer interface {
	mustEmbedUnimplementedGoodServer()
}

func RegisterGoodServer(s grpc.ServiceRegistrar, srv GoodServer) {
	s.RegisterService(&Good_ServiceDesc, srv)
}

func _Good_CreateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).CreateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_CreateGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).CreateGood(ctx, req.(*CreateGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_FindGoodPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).FindGoodPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_FindGoodPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).FindGoodPage(ctx, req.(*FindGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_CreateGoodDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).CreateGoodDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_CreateGoodDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).CreateGoodDetails(ctx, req.(*CreateGoodDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Good_ServiceDesc is the grpc.ServiceDesc for Good service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Good_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.Good",
	HandlerType: (*GoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGood",
			Handler:    _Good_CreateGood_Handler,
		},
		{
			MethodName: "FindGoodPage",
			Handler:    _Good_FindGoodPage_Handler,
		},
		{
			MethodName: "CreateGoodDetails",
			Handler:    _Good_CreateGoodDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "good.proto",
}
